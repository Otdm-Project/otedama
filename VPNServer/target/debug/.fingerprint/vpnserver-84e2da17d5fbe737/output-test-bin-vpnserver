{"$message_type":"diagnostic","message":"the trait bound `url::Url: IntoClientRequest` is not satisfied","code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","spans":[{"file_name":"src/handler.rs","byte_start":400,"byte_end":403,"line_start":11,"line_end":11,"column_start":40,"column_end":43,"is_primary":true,"text":[{"text":"    let (ws_stream, _) = connect_async(url).await.expect(\"Failed to connect to APIServer\");","highlight_start":40,"highlight_end":43}],"label":"the trait `IntoClientRequest` is not implemented for `url::Url`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src/handler.rs","byte_start":386,"byte_end":399,"line_start":11,"line_end":11,"column_start":26,"column_end":39,"is_primary":false,"text":[{"text":"    let (ws_stream, _) = connect_async(url).await.expect(\"Failed to connect to APIServer\");","highlight_start":26,"highlight_end":39}],"label":"required by a bound introduced by this call","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"the following other types implement trait `IntoClientRequest`:\n  &'a String\n  &'a str\n  &'a tokio_tungstenite::tungstenite::http::Uri\n  ClientRequestBuilder\n  String\n  httparse::Request<'h, 'b>\n  tokio_tungstenite::tungstenite::http::Request<()>\n  tokio_tungstenite::tungstenite::http::Uri","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"required by a bound in `connect_async`","code":null,"level":"note","spans":[{"file_name":"/home/suika/.cargo/registry/src/index.crates.io-6f17d22bba15001f/tokio-tungstenite-0.23.1/src/connect.rs","byte_start":313,"byte_end":326,"line_start":13,"line_end":13,"column_start":14,"column_end":27,"is_primary":false,"text":[{"text":"pub async fn connect_async<R>(","highlight_start":14,"highlight_end":27}],"label":"required by a bound in this function","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/home/suika/.cargo/registry/src/index.crates.io-6f17d22bba15001f/tokio-tungstenite-0.23.1/src/connect.rs","byte_start":435,"byte_end":452,"line_start":17,"line_end":17,"column_start":8,"column_end":25,"is_primary":true,"text":[{"text":"    R: IntoClientRequest + Unpin,","highlight_start":8,"highlight_end":25}],"label":"required by this bound in `connect_async`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0277]\u001b[0m\u001b[0m\u001b[1m: the trait bound `url::Url: IntoClientRequest` is not satisfied\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/handler.rs:11:40\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m11\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    let (ws_stream, _) = connect_async(url).await.expect(\"Failed to connect to APIServer\");\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                          \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mthe trait `IntoClientRequest` is not implemented for `url::Url`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                          \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                          \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mrequired by a bound introduced by this call\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: the following other types implement trait `IntoClientRequest`:\u001b[0m\n\u001b[0m             &'a String\u001b[0m\n\u001b[0m             &'a str\u001b[0m\n\u001b[0m             &'a tokio_tungstenite::tungstenite::http::Uri\u001b[0m\n\u001b[0m             ClientRequestBuilder\u001b[0m\n\u001b[0m             String\u001b[0m\n\u001b[0m             httparse::Request<'h, 'b>\u001b[0m\n\u001b[0m             tokio_tungstenite::tungstenite::http::Request<()>\u001b[0m\n\u001b[0m             tokio_tungstenite::tungstenite::http::Uri\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: required by a bound in `connect_async`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/suika/.cargo/registry/src/index.crates.io-6f17d22bba15001f/tokio-tungstenite-0.23.1/src/connect.rs:17:8\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m13\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub async fn connect_async<R>(\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m              \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mrequired by a bound in this function\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m17\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    R: IntoClientRequest + Unpin,\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m        \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10mrequired by this bound in `connect_async`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"the trait bound `url::Url: IntoClientRequest` is not satisfied","code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","spans":[{"file_name":"src/handler.rs","byte_start":386,"byte_end":404,"line_start":11,"line_end":11,"column_start":26,"column_end":44,"is_primary":true,"text":[{"text":"    let (ws_stream, _) = connect_async(url).await.expect(\"Failed to connect to APIServer\");","highlight_start":26,"highlight_end":44}],"label":"the trait `IntoClientRequest` is not implemented for `url::Url`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"the following other types implement trait `IntoClientRequest`:\n  &'a String\n  &'a str\n  &'a tokio_tungstenite::tungstenite::http::Uri\n  ClientRequestBuilder\n  String\n  httparse::Request<'h, 'b>\n  tokio_tungstenite::tungstenite::http::Request<()>\n  tokio_tungstenite::tungstenite::http::Uri","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"required by a bound in `connect_async`","code":null,"level":"note","spans":[{"file_name":"/home/suika/.cargo/registry/src/index.crates.io-6f17d22bba15001f/tokio-tungstenite-0.23.1/src/connect.rs","byte_start":313,"byte_end":326,"line_start":13,"line_end":13,"column_start":14,"column_end":27,"is_primary":false,"text":[{"text":"pub async fn connect_async<R>(","highlight_start":14,"highlight_end":27}],"label":"required by a bound in this function","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/home/suika/.cargo/registry/src/index.crates.io-6f17d22bba15001f/tokio-tungstenite-0.23.1/src/connect.rs","byte_start":435,"byte_end":452,"line_start":17,"line_end":17,"column_start":8,"column_end":25,"is_primary":true,"text":[{"text":"    R: IntoClientRequest + Unpin,","highlight_start":8,"highlight_end":25}],"label":"required by this bound in `connect_async`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0277]\u001b[0m\u001b[0m\u001b[1m: the trait bound `url::Url: IntoClientRequest` is not satisfied\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/handler.rs:11:26\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m11\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    let (ws_stream, _) = connect_async(url).await.expect(\"Failed to connect to APIServer\");\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                          \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mthe trait `IntoClientRequest` is not implemented for `url::Url`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: the following other types implement trait `IntoClientRequest`:\u001b[0m\n\u001b[0m             &'a String\u001b[0m\n\u001b[0m             &'a str\u001b[0m\n\u001b[0m             &'a tokio_tungstenite::tungstenite::http::Uri\u001b[0m\n\u001b[0m             ClientRequestBuilder\u001b[0m\n\u001b[0m             String\u001b[0m\n\u001b[0m             httparse::Request<'h, 'b>\u001b[0m\n\u001b[0m             tokio_tungstenite::tungstenite::http::Request<()>\u001b[0m\n\u001b[0m             tokio_tungstenite::tungstenite::http::Uri\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: required by a bound in `connect_async`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/suika/.cargo/registry/src/index.crates.io-6f17d22bba15001f/tokio-tungstenite-0.23.1/src/connect.rs:17:8\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m13\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub async fn connect_async<R>(\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m              \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mrequired by a bound in this function\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m17\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    R: IntoClientRequest + Unpin,\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m        \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10mrequired by this bound in `connect_async`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"the trait bound `url::Url: IntoClientRequest` is not satisfied","code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","spans":[{"file_name":"src/handler.rs","byte_start":405,"byte_end":410,"line_start":11,"line_end":11,"column_start":45,"column_end":50,"is_primary":true,"text":[{"text":"    let (ws_stream, _) = connect_async(url).await.expect(\"Failed to connect to APIServer\");","highlight_start":45,"highlight_end":50}],"label":"the trait `IntoClientRequest` is not implemented for `url::Url`","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src/handler.rs","byte_start":405,"byte_end":410,"line_start":11,"line_end":11,"column_start":45,"column_end":50,"is_primary":false,"text":[{"text":"    let (ws_stream, _) = connect_async(url).await.expect(\"Failed to connect to APIServer\");","highlight_start":45,"highlight_end":50}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"desugaring of `await` expression","def_site_span":{"file_name":"src/main.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1,"is_primary":false,"text":[],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"the following other types implement trait `IntoClientRequest`:\n  &'a String\n  &'a str\n  &'a tokio_tungstenite::tungstenite::http::Uri\n  ClientRequestBuilder\n  String\n  httparse::Request<'h, 'b>\n  tokio_tungstenite::tungstenite::http::Request<()>\n  tokio_tungstenite::tungstenite::http::Uri","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"required by a bound in `connect_async`","code":null,"level":"note","spans":[{"file_name":"/home/suika/.cargo/registry/src/index.crates.io-6f17d22bba15001f/tokio-tungstenite-0.23.1/src/connect.rs","byte_start":313,"byte_end":326,"line_start":13,"line_end":13,"column_start":14,"column_end":27,"is_primary":false,"text":[{"text":"pub async fn connect_async<R>(","highlight_start":14,"highlight_end":27}],"label":"required by a bound in this function","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/home/suika/.cargo/registry/src/index.crates.io-6f17d22bba15001f/tokio-tungstenite-0.23.1/src/connect.rs","byte_start":435,"byte_end":452,"line_start":17,"line_end":17,"column_start":8,"column_end":25,"is_primary":true,"text":[{"text":"    R: IntoClientRequest + Unpin,","highlight_start":8,"highlight_end":25}],"label":"required by this bound in `connect_async`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0277]\u001b[0m\u001b[0m\u001b[1m: the trait bound `url::Url: IntoClientRequest` is not satisfied\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/handler.rs:11:45\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m11\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    let (ws_stream, _) = connect_async(url).await.expect(\"Failed to connect to APIServer\");\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                             \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mthe trait `IntoClientRequest` is not implemented for `url::Url`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: the following other types implement trait `IntoClientRequest`:\u001b[0m\n\u001b[0m             &'a String\u001b[0m\n\u001b[0m             &'a str\u001b[0m\n\u001b[0m             &'a tokio_tungstenite::tungstenite::http::Uri\u001b[0m\n\u001b[0m             ClientRequestBuilder\u001b[0m\n\u001b[0m             String\u001b[0m\n\u001b[0m             httparse::Request<'h, 'b>\u001b[0m\n\u001b[0m             tokio_tungstenite::tungstenite::http::Request<()>\u001b[0m\n\u001b[0m             tokio_tungstenite::tungstenite::http::Uri\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: required by a bound in `connect_async`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/suika/.cargo/registry/src/index.crates.io-6f17d22bba15001f/tokio-tungstenite-0.23.1/src/connect.rs:17:8\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m13\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub async fn connect_async<R>(\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m              \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mrequired by a bound in this function\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m17\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    R: IntoClientRequest + Unpin,\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m        \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10mrequired by this bound in `connect_async`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"aborting due to 3 previous errors","code":null,"level":"error","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m: aborting due to 3 previous errors\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"For more information about this error, try `rustc --explain E0277`.","code":null,"level":"failure-note","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1mFor more information about this error, try `rustc --explain E0277`.\u001b[0m\n"}
